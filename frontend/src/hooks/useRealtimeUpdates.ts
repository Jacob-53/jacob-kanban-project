// src/hooks/useRealtimeUpdates.ts (Ìè¥ÎßÅ Î∞©Ïãù ÎåÄÏ≤¥)
import { useEffect, useRef } from 'react';
import { useAuthStore } from '@/store/authStore';
import { useTaskStore } from '@/store/taskStore';
import { useHelpRequestStore } from '@/store/helpRequestStore';
import { webSocketService } from '@/lib/websocket';

interface RealtimeOptions {
  enableWebSocket?: boolean;
  pollingInterval?: number; // ms
  enablePolling?: boolean;
}

export function useRealtimeUpdates(options: RealtimeOptions = {}) {
  const {
    enableWebSocket = true,
    pollingInterval = 10000, // 10Ï¥à
    enablePolling = true
  } = options;

  const { isAuthenticated, user } = useAuthStore();
  const { fetchTasks } = useTaskStore();
  const { fetchHelpRequests } = useHelpRequestStore();
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const wsCheckRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!isAuthenticated) {
      // Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏúºÎ©¥ Î™®Îì† ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      if (wsCheckRef.current) {
        clearTimeout(wsCheckRef.current);
        wsCheckRef.current = null;
      }
      return;
    }

    // WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ ÌõÑ Ìè¥ÎßÅ Ïó¨Î∂Ä Í≤∞Ï†ï
    const checkWebSocketAndStartPolling = () => {
      if (enableWebSocket && webSocketService.isConnected()) {
        console.log('üîå WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏñ¥ Ìè¥ÎßÅ ÏÇ¨Ïö© ÏïàÌï®');
        return;
      }

      if (enablePolling) {
        console.log('üîÑ WebSocket ÎØ∏Ïó∞Í≤∞Î°ú Ìè¥ÎßÅ ÏãúÏûë (Í∞ÑÍ≤©:', pollingInterval, 'ms)');
        
        intervalRef.current = setInterval(async () => {
          // WebSocketÏù¥ Ïó∞Í≤∞ÎêòÎ©¥ Ìè¥ÎßÅ Ï§ëÏßÄ
          if (enableWebSocket && webSocketService.isConnected()) {
            console.log('üîå WebSocket Ïó∞Í≤∞Îê®, Ìè¥ÎßÅ Ï§ëÏßÄ');
            if (intervalRef.current) {
              clearInterval(intervalRef.current);
              intervalRef.current = null;
            }
            return;
          }

          console.log('üîÑ Ìè¥ÎßÅÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...');
          
          try {
            // Task Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
            await fetchTasks();
            
            // ÍµêÏÇ¨Ïù∏ Í≤ΩÏö∞ ÎèÑÏõÄ ÏöîÏ≤≠ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
            if (user?.is_teacher || user?.role === 'admin') {
              await fetchHelpRequests();
            }
          } catch (error) {
            console.error('Ìè¥ÎßÅ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
          }
        }, pollingInterval);
      }
    };

    // 3Ï¥à ÌõÑÏóê WebSocket ÏÉÅÌÉúÎ•º Ï≤¥ÌÅ¨ÌïòÍ≥† Ìè¥ÎßÅ ÏãúÏûë Ïó¨Î∂Ä Í≤∞Ï†ï
    wsCheckRef.current = setTimeout(checkWebSocketAndStartPolling, 3000);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      if (wsCheckRef.current) {
        clearTimeout(wsCheckRef.current);
        wsCheckRef.current = null;
      }
    };
  }, [isAuthenticated, user, fetchTasks, fetchHelpRequests, enableWebSocket, enablePolling, pollingInterval]);

  // WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú Î∞òÌôò
  return {
    isWebSocketConnected: enableWebSocket ? webSocketService.isConnected() : false,
    isPollingActive: !!intervalRef.current
  };
}

// Í∞ÑÌé∏ ÏÇ¨Ïö©Î≤ï
export function useSimpleRealtimeUpdates() {
  return useRealtimeUpdates({
    enableWebSocket: true,
    enablePolling: true,
    pollingInterval: 10000 // 10Ï¥à
  });
}